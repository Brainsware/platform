{"name":"platform","tagline":"A set of JavaScript modules and functions to work with builtin types in a functional manner.","body":"# platform.coffee\r\n\r\nA set of modules aiming to provide a state of the art *platform* to build\r\nlibraries and applications with. It incorporates building block features of\r\nother libraries and frameworks with the goal to reduce code duplication\r\nthroughout different projects.\r\n\r\n*platform* embraces functional programming and provides composable wrappers for\r\nmost of the standard types' methods as well as functions for function\r\ncomposition.\r\n\r\nAll of the code is usable in any kind of environment, be it NodeJS, the browser\r\nor any other ES5 compliant runtime.\r\n\r\n## Type functions\r\n\r\n * `is_a(String, Any) -> Boolean`\r\n * `type_of(Any)      -> String`\r\n * `is_object(Any)    -> Boolean`\r\n * `is_array(Any)     -> Boolean`\r\n * `is_function(Any)  -> Boolean`\r\n * `is_string(Any)    -> Boolean`\r\n * `is_regexp(Any)    -> Boolean`\r\n * `is_bool(Any)      -> Boolean`\r\n * `is_error(Any)     -> Boolean`\r\n * `is_number(Any)    -> Boolean`\r\n * `is_date(Any)      -> Boolean`\r\n * `is_null(Any)      -> Boolean`\r\n * `is_undefined(Any) -> Boolean`\r\n * `is_nan(Any)       -> Boolean`\r\n\r\n## Higher-order functions\r\n\r\n * `args_from_array(Function) -> Function`: Return a function that takes arguments as array instead of an argument list.\r\n * `compose(Function...) -> Function`: Compose a list of functions (`compose(f, g, h) == h(g(f(...)))`)\r\n * `sequence(Function...) -> Function`: The same as `compose` but arguments are reversed (`sequence(f, g, h) == f(g(h(...)))`)\r\n * `partial(Function, Any...) -> Function`: Partially apply given arguments to a function (`partial(fn, 1, 2, 3) == fn(1, 2, 3, ...)`)\r\n * `partial_right(Function, Any...) -> Function`: Partially apply given arguments to a function, but start with the last arguments (`partial_right(fn, 1, 2, 3) == fn(..., 1, 2, 3)`)\r\n * `partial_reverse(Function, Any...) -> Function`: Partially apply given arguments to a function, but start with the last arguments in reversed order (`partial_reverse(fn, 1, 2, 3) == fn(..., 3, 2, 1)`)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}