// Generated by CoffeeScript 1.7.1
(function() {
  var A,
    __slice = [].slice;

  A = {
    clone: function(array) {
      return array.slice(0);
    },
    concat: function() {
      var args, array, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), array = arguments[_i++];
      return array.concat.apply(null, args);
    },
    each: function(fn, array) {
      array.forEach(fn);
      return void 0;
    },
    equals: function(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      return a.reduce(function(previous, current, i) {
        return previous && b[i] === current;
      });
    },
    every: function(fn, array) {
      return true === array.every(fn);
    },
    filter: function(fn, array) {
      return array.filter(fn);
    },
    has_element: function(element, array) {
      return -1 !== array.indexOf(element);
    },
    index_of: function(element, array) {
      return array.indexOf(element);
    },
    join: function(seperator, array) {
      return array.join(seperator);
    },
    last_index_of: function(element, array) {
      return array.lastIndexOf(element);
    },
    map: function(fn, array) {
      return array.map(fn);
    },
    reduce: function(fn, initial_value, array) {
      return array.reduce(fn, initial_value);
    },
    reduce_right: function(fn, initial_value, array) {
      return array.reduceRight(fn, initial_value);
    },
    reverse: function(array) {
      return A.clone(array).reverse();
    },
    slice: function() {
      var array, begin_end, _i;
      begin_end = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), array = arguments[_i++];
      return array.slice.apply(null, begin_end);
    },
    some: function(fn, array) {
      return array.some(fn);
    },
    sort: function(array) {
      return A.clone(array).sort();
    },
    sort_by: function(fn, array) {
      return A.clone(array).sort(fn);
    },
    replace: function(index, n, replace_with, array) {
      return A.clone(array).splice(index, n, replace_with);
    }
  };

  module.exports = A;

}).call(this);
