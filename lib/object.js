// Generated by CoffeeScript 1.7.1
(function() {
  var A, O, T;

  A = require('./array');

  T = require('./types');

  O = {
    each: function(fn, object) {
      var wrapped;
      wrapped = function(object) {
        return function(element, index, array) {
          return fn.apply(null, [object[element], element, object]);
        };
      };
      A.each(wrapped(object), Object.keys(object));
      return void 0;
    },
    equals: function(a, b) {
      var fn, keys_a, keys_b;
      if (!(T.is_object(a) && T.is_object(b))) {
        return false;
      }
      keys_a = Object.keys(a);
      keys_b = Object.keys(b);
      if (keys_a.length !== keys_b.length) {
        return false;
      }
      if (!A.equals(keys_a, keys_b)) {
        return false;
      }
      fn = function(previous, value, key, obj) {
        if (T.type_of(value) !== T.type_of(b[key])) {
          return false;
        }
        if (T.is_array(value)) {
          return previous && A.equals(value, b[key]);
        }
        if (T.is_object(value)) {
          return previous;
        }
        return previous && b[key] === value;
      };
      return O.reduce(fn, true, a);
    },
    every: function(fn, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(value, index, array) {
          return fn(object[value], value, object);
        };
      };
      return A.every(wrapped(fn, object), Object.keys(object));
    },
    filter: function(fn, object) {
      var wrapped;
      wrapped = function(object) {
        return function(new_object, key) {
          new_object[key] = object[key];
          return new_object;
        };
      };
      return A.reduce(wrapped(object), {}, A.filter(fn, Object.keys(object)));
    },
    has_key: function(key, object) {
      return A.has_element(key, Object.keys(object));
    },
    has_value: function(value, object) {
      var wrapped;
      wrapped = function(value) {
        return function(v) {
          return v === value;
        };
      };
      return O.some(wrapped(value), object);
    },
    map: function(fn, object) {
      var results, wrapped;
      results = {};
      wrapped = function(results, fn) {
        return function(element, index, array) {
          var result;
          result = fn(element, index, array);
          if (T.is_array(result) && result.length === 2) {
            results[result[0]] = results[result[1]];
            return;
          }
          return results[index] = result;
        };
      };
      O.each(wrapped(results, fn), object);
      return results;
    },
    reduce: function(fn, initial_value, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(previous, current, key, array) {
          return fn(previous, object[current], current, object);
        };
      };
      return A.reduce(wrapped(fn, object), initial_value, Object.keys(object));
    },
    some: function(fn, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(value, index, array) {
          return fn(object[value], value, object);
        };
      };
      return A.some(wrapped(fn, object), Object.keys(object));
    }
  };

  module.exports = O;

}).call(this);
