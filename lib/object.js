// Generated by CoffeeScript 1.7.1
(function() {
  var A, O;

  A = require('./array');

  O = {
    each: function(fn, object) {
      var wrapped;
      wrapped = function(object) {
        return function(element, index, array) {
          return fn.apply(null, [object[element], element, object]);
        };
      };
      A.each(wrapped(object), Object.keys(object));
      return void 0;
    },
    every: function(fn, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(value, index, array) {
          return fn(object[value], value, object);
        };
      };
      return A.every(wrapped(fn, object), Object.keys(object));
    },
    filter: function(fn, object) {
      var wrapped;
      wrapped = function(object) {
        return function(new_object, key) {
          new_object[key] = object[key];
          return new_object;
        };
      };
      return A.reduce(wrapped(object), {}, A.filter(fn, Object.keys(object)));
    },
    has_value: function(value, object) {
      var wrapped;
      wrapped = function(value) {
        return function(v) {
          return v === value;
        };
      };
      return O.some(wrapped(value), object);
    },
    has_key: function(key, object) {
      return A.has_element(key, Object.keys(object));
    },
    map: function(fn, object) {
      var results, wrapped;
      results = {};
      wrapped = function(fn) {
        return function(element, index, array) {
          return results[index] = fn(element, index, array);
        };
      };
      O.each(wrapped(fn), object);
      return results;
    },
    reduce: function(fn, initial_value, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(previous, current, key, array) {
          return fn(previous, object[current], current, object);
        };
      };
      return A.reduce(wrapped(fn, object), initial_value, Object.keys(object));
    },
    some: function(fn, object) {
      var wrapped;
      wrapped = function(fn, object) {
        return function(value, index, array) {
          return fn(object[value], value, object);
        };
      };
      return A.some(wrapped(fn, object), Object.keys(object));
    }
  };

  module.exports = O;

}).call(this);
